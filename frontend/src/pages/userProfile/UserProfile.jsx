import { useState, useEffect } from "react";
import { Button } from "@/components/ui/buttonn";
import Role from "@/components/common/Role";
import { motion } from "framer-motion";
import AuthService from "@/services/AuthService";
import UserService from "@/services/UserService";
import { toast } from "sonner";
import userGymImg from "@/assets/user_gym.png";

export default function UserProfile() {
  const [user, setUser] = useState(null);
  const [editing, setEditing] = useState(false);
  const [formData, setFormData] = useState({});
  const [saving, setSaving] = useState(false);
  const [changingPass, setChangingPass] = useState(false);
  const [passwordData, setPasswordData] = useState({
    oldPassword: "",
    newPassword: "",
    confirmNewPassword: "",
  });
  const [saveMessage, setSaveMessage] = useState({ text: "", type: "" });

  // üß≠ Load user info t·ª´ localStorage
  useEffect(() => {
    const auth = AuthService.getAuth();
    if (auth?.user) {
      const u = auth.user;
      const groups = Array.isArray(u.groups) ? u.groups : [];
      const mainRole = groups.includes("super-admin")
        ? "super-admin"
        : groups[0] || "operator";

      // üëâ C·∫Øt b·ªè +84 khi hi·ªÉn th·ªã
      let rawPhone = u.userAttributes?.phone_number || "";
      if (rawPhone.startsWith("+84")) rawPhone = rawPhone.slice(3);
      if (rawPhone.startsWith("0")) rawPhone = rawPhone.slice(1);

      setUser(u);
      setFormData({
        name: u.userAttributes?.name || "",
        email: u.userAttributes?.email || "",
        phone_number: rawPhone || "",
        address: u.userAttributes?.address || "",
        gender:
          u.userAttributes?.gender === "male"
            ? "Nam"
            : u.userAttributes?.gender === "female"
            ? "N·ªØ"
            : "Kh√°c",
        birthdate: u.userAttributes?.birthdate || "",
        branch_id: u.userAttributes?.["custom:branch_id"] || "",
        created_at: u.userAttributes?.["custom:created_at"] || "",
        updated_at: u.userAttributes?.["custom:updated_at"] || "",
        role: mainRole,
        username: u.username || "",
      });
    }
  }, []);

  if (!user)
    return (
      <div className="flex justify-center items-center h-[60vh]">
        <p className="text-gray-500 dark:text-gray-400 text-lg">
          ‚è≥ ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...
        </p>
      </div>
    );

  const handleChange = (field, value) =>
    setFormData((prev) => ({ ...prev, [field]: value }));

  // ‚úÖ Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i sang ƒë·ªãnh d·∫°ng AWS (+84)
  const normalizePhone = (phone) => {
    if (!phone) return "";
    let cleaned = phone.trim();

    // N·∫øu nh·∫≠p c√≥ d·∫•u c√°ch, b·ªè h·∫øt
    cleaned = cleaned.replace(/\s+/g, "");

    // N·∫øu c√≥ +84 th√¨ gi·ªØ nguy√™n
    if (cleaned.startsWith("+84")) return cleaned;

    // N·∫øu c√≥ s·ªë 0 ƒë·∫ßu => b·ªè 0 r·ªìi th√™m +84
    if (cleaned.startsWith("0")) return "+84" + cleaned.slice(1);

    // N·∫øu kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát => th√™m +84 v√†o ƒë·∫ßu
    return "+84" + cleaned;
  };

  // ‚úÖ G·ªçi API updateSelf
  const handleSave = async () => {
    try {
      setSaving(true);

      const payload = {
        name: formData.name,
        address: formData.address,
        phone_number: normalizePhone(formData.phone_number),
        gender: formData.gender,
        birthdate: formData.birthdate,
      };

      const res = await UserService.updateSelf(payload);
      toast.success(res.message || "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");

      // üîÑ L·∫•y l·∫°i th√¥ng tin user m·ªõi nh·∫•t t·ª´ server
      const auth = AuthService.getAuth();
      if (auth?.accessToken) {
        const freshUser = await AuthService.getMeWithToken(auth.accessToken);
        AuthService.saveAuth({
          username: auth.username,
          accessToken: auth.accessToken,
          refreshToken: auth.refreshToken,
          user: freshUser,
        });
        setUser(freshUser);
        toast.success("ƒê√£ ƒë·ªìng b·ªô l·∫°i th√¥ng tin ng∆∞·ªùi d√πng!");
        setSaveMessage({
          text: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!",
          type: "success",
        });
      }

      setUser((prev) => ({
        ...prev,
        userAttributes: { ...prev.userAttributes, ...payload },
      }));

      setEditing(false);
    } catch (err) {
      console.error("‚ùå L·ªói khi updateSelf:", err);
      toast.error(err.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
      setSaveMessage({ text: "C·∫≠p nh·∫≠t th·∫•t b·∫°i!", type: "error" });
    } finally {
      setSaving(false);
    }
  };

  // ‚úÖ ƒê·ªïi m·∫≠t kh·∫©u
  const handleChangePassword = async () => {
    const { oldPassword, newPassword, confirmNewPassword } = passwordData;

    if (!oldPassword || !newPassword || !confirmNewPassword) {
      toast.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng!");
      return;
    }

    if (newPassword !== confirmNewPassword) {
      toast.error("M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp!");
      return;
    }

    try {
      setSaving(true);
      const res = await AuthService.changePassword(oldPassword, newPassword);
      toast.success(res.message || "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
      setSaveMessage({ text: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!", type: "success" });
      setChangingPass(false);
      setPasswordData({
        oldPassword: "",
        newPassword: "",
        confirmNewPassword: "",
      });
    } catch (err) {
      console.error("‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", err);
      toast.error(err.message || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i!");
      setSaveMessage({ text: "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i!", type: "error" });
    } finally {
      setSaving(false);
    }
  };

  const convertRoleName = (r) =>
    ({
      "super-admin": "Ng∆∞·ªùi qu·∫£n tr·ªã",
      admin: "Ng∆∞·ªùi qu·∫£n l√Ω",
      operator: "Nh√¢n vi√™n tr·ª±c ph√≤ng",
      technician: "Nh√¢n vi√™n kƒ© thu·∫≠t",
    }[r] || "Kh√°c");

  // üîπ ƒê·ªãnh d·∫°ng ng√†y th√†nh dd/MM/yyyy
  const formatDate = (dateStr) => {
    if (!dateStr) return "‚Äî";
    const d = new Date(dateStr);
    if (isNaN(d)) return "‚Äî";
    return d.toLocaleDateString("vi-VN", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  };

  return (
    <motion.div
      className="p-6"
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="bg-white dark:bg-[#121212] rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 p-8 space-y-8 transition-colors">
        {/* Header */}
        <div className="flex items-center gap-6 border-b border-gray-200 dark:border-gray-700 pb-6">
          <img
            src={userGymImg}
            alt={formData.username}
            className="w-32 h-32 rounded-full object-cover shadow-lg border-4 border-emerald-500"
          />
          <div>
            {editing ? (
              <input
                type="text"
                value={formData.name}
                onChange={(e) => handleChange("name", e.target.value)}
                className="px-3 py-2 rounded-lg border dark:border-gray-600 bg-gray-50 dark:bg-gray-800 text-lg font-bold dark:text-white"
              />
            ) : (
              <h2 className="text-3xl font-bold text-gray-900 dark:text-white">
                {formData.name || formData.username}
              </h2>
            )}

            <div className="flex gap-2 mt-2 flex-wrap">
              <Role role={convertRoleName(formData.role)} />
            </div>

            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
              Username: {formData.username} ‚Ä¢ Ng√†y t·∫°o:{" "}
              {formatDate(formData.created_at)}
            </p>
          </div>
        </div>

        {/* Th√¥ng tin chi ti·∫øt */}
        <div className="grid md:grid-cols-2 gap-x-12 gap-y-5 text-base text-gray-700 dark:text-gray-300">
          {/* Gi·ªõi t√≠nh */}
          <p>
            <strong>Gi·ªõi t√≠nh:</strong>{" "}
            {editing ? (
              <select
                value={formData.gender}
                onChange={(e) => handleChange("gender", e.target.value)}
                className="mt-1 w-full px-3 py-2 rounded-lg border dark:border-gray-600 bg-gray-50 dark:bg-gray-800 dark:text-white"
              >
                <option value="Nam">Nam</option>
                <option value="N·ªØ">N·ªØ</option>
                <option value="Kh√°c">Kh√°c</option>
              </select>
            ) : (
              formData.gender || "‚Äî"
            )}
          </p>

          {/* Ng√†y sinh */}
          <p>
            <strong>Ng√†y sinh:</strong>{" "}
            {editing ? (
              <input
                type="date"
                value={formData.birthdate || ""}
                onChange={(e) => handleChange("birthdate", e.target.value)}
                className="mt-1 w-full px-3 py-2 rounded-lg border dark:border-gray-600 bg-gray-50 dark:bg-gray-800 dark:text-white"
              />
            ) : (
              formatDate(formData.birthdate)
            )}
          </p>

          {/* S·ªë ƒëi·ªán tho·∫°i (ch·ªâ s·ª≠a ph·∫ßn sau +84) */}
          <p>
            <strong>S·ªë ƒëi·ªán tho·∫°i:</strong>{" "}
            {editing ? (
              <div className="flex items-center gap-1">
                <span className="text-gray-500 dark:text-gray-400 font-semibold">
                  +84
                </span>
                <input
                  type="text"
                  value={formData.phone_number || ""}
                  onChange={(e) =>
                    handleChange(
                      "phone_number",
                      e.target.value.replace(/\D/g, "")
                    )
                  }
                  className="mt-1 w-full px-3 py-2 rounded-lg border dark:border-gray-600 bg-gray-50 dark:bg-gray-800 dark:text-white"
                  placeholder="Nh·∫≠p s·ªë"
                />
              </div>
            ) : formData.phone_number ? (
              `+84${formData.phone_number}`
            ) : (
              "‚Äî"
            )}
          </p>

          {/* Email (readonly) */}
          <p>
            <strong>Email:</strong> {formData.email}
          </p>

          {/* ƒê·ªãa ch·ªâ */}
          <p className="col-span-2">
            <strong>ƒê·ªãa ch·ªâ:</strong>{" "}
            {editing ? (
              <input
                type="text"
                value={formData.address || ""}
                onChange={(e) => handleChange("address", e.target.value)}
                className="mt-1 w-full px-3 py-2 rounded-lg border dark:border-gray-600 bg-gray-50 dark:bg-gray-800 dark:text-white"
              />
            ) : (
              formData.address || "‚Äî"
            )}
          </p>

          {/* C·∫≠p nh·∫≠t g·∫ßn nh·∫•t */}
          <p className="col-span-2">
            <strong>C·∫≠p nh·∫≠t g·∫ßn nh·∫•t:</strong>{" "}
            {new Date(formData.updated_at).toLocaleString("vi-VN")}
          </p>
        </div>

        {changingPass && (
          <div className="mt-6 bg-gray-50 dark:bg-gray-800 p-5 rounded-xl border border-gray-300 dark:border-gray-700 space-y-4 transition-all">
            <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-100">
              üîê ƒê·ªïi m·∫≠t kh·∫©u
            </h3>

            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1 text-gray-600 dark:text-gray-300">
                  M·∫≠t kh·∫©u c≈©
                </label>
                <input
                  type="password"
                  value={passwordData.oldPassword}
                  onChange={(e) =>
                    setPasswordData((prev) => ({
                      ...prev,
                      oldPassword: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 rounded-lg border dark:border-gray-600 bg-white dark:bg-gray-900 dark:text-white"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1 text-gray-600 dark:text-gray-300">
                  M·∫≠t kh·∫©u m·ªõi
                </label>
                <input
                  type="password"
                  value={passwordData.newPassword}
                  onChange={(e) =>
                    setPasswordData((prev) => ({
                      ...prev,
                      newPassword: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 rounded-lg border dark:border-gray-600 bg-white dark:bg-gray-900 dark:text-white"
                />
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-medium mb-1 text-gray-600 dark:text-gray-300">
                  Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi
                </label>
                <input
                  type="password"
                  value={passwordData.confirmNewPassword}
                  onChange={(e) =>
                    setPasswordData((prev) => ({
                      ...prev,
                      confirmNewPassword: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 rounded-lg border dark:border-gray-600 bg-white dark:bg-gray-900 dark:text-white"
                />
              </div>
            </div>

            <div className="flex justify-end gap-3 pt-3">
              <Button
                onClick={() => setChangingPass(false)}
                className="bg-gray-400 text-white hover:bg-gray-500"
              >
                ‚ùå H·ªßy
              </Button>
              <Button
                onClick={handleChangePassword}
                className="bg-amber-500 text-white hover:bg-amber-600"
                disabled={saving}
              >
                {saving ? "‚è≥ ƒêang ƒë·ªïi..." : "üíæ ƒê·ªïi m·∫≠t kh·∫©u"}
              </Button>
            </div>
          </div>
        )}

        {/* N√∫t h√†nh ƒë·ªông */}
        <div className="flex flex-wrap gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
          {!changingPass && (
            <>
              {editing ? (
                <>
                  <Button
                    onClick={() => setEditing(false)}
                    className="bg-gray-400 text-white hover:bg-gray-500"
                    disabled={saving}
                  >
                    ‚ùå H·ªßy
                  </Button>
                  <Button
                    onClick={handleSave}
                    className="bg-emerald-600 text-white hover:bg-emerald-700"
                    disabled={saving}
                  >
                    {saving ? "‚è≥ ƒêang l∆∞u..." : "üíæ L∆∞u thay ƒë·ªïi"}
                  </Button>
                </>
              ) : (
                <>
                  <Button
                    onClick={() => setEditing(true)}
                    className="bg-blue-600 text-white hover:bg-blue-700"
                  >
                    ‚úèÔ∏è Ch·ªânh s·ª≠a
                  </Button>
                  <Button
                    onClick={() => setChangingPass(true)}
                    className="bg-amber-500 text-white hover:bg-amber-600"
                  >
                    üîí ƒê·ªïi m·∫≠t kh·∫©u
                  </Button>
                </>
              )}
            </>
          )}
        </div>
        {saveMessage.text && (
          <p
            className={`text-sm mt-2 transition ${
              saveMessage.type === "success"
                ? "text-emerald-600"
                : saveMessage.type === "error"
                ? "text-red-500"
                : "text-amber-500 animate-pulse"
            }`}
          >
            {saveMessage.text}
          </p>
        )}
      </div>
    </motion.div>
  );
}
