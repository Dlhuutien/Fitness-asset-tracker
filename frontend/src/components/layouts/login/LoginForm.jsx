import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { motion, AnimatePresence } from "framer-motion";
import { useNavigate } from "react-router-dom";

import AuthService from "@/services/AuthService";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/buttonn";
import {
  LoadingAlert,
  SuccessAlert,
  ErrorAlert,
  ServerErrorAlert,
  DisabledUserAlert,
} from "./LoginAlert";
import { toast } from "sonner";

// ‚úÖ Schema cho ƒëƒÉng nh·∫≠p
const loginSchema = z.object({
  username: z.string().min(1, "T√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
  password: z.string().min(8, "M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 8 k√Ω t·ª±"),
});

// ‚úÖ Schema cho ƒë·ªïi m·∫≠t kh·∫©u
const newPassSchema = z
  .object({
    newPassword: z.string().min(8, "M·∫≠t kh·∫©u m·ªõi ph·∫£i √≠t nh·∫•t 8 k√Ω t·ª±"),
    confirmPassword: z
      .string()
      .min(8, "X√°c nh·∫≠n m·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 8 k√Ω t·ª±"),
  })
  .refine((data) => data.newPassword === data.confirmPassword, {
    message: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp",
    path: ["confirmPassword"],
  });

export default function LoginForm() {
  const [showPassword, setShowPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [shakeKey, setShakeKey] = useState(0);
  const [loading, setLoading] = useState(false);
  const [alert, setAlert] = useState(null);
  const [newUser, setNewUser] = useState(null);
  const [forgotStep, setForgotStep] = useState(1); // 1: nh·∫≠p user+email, 2: nh·∫≠p code+pass
  const [view, setView] = useState("login"); // "login" | "newpass" | "forgot"
  const [forgotForm, setForgotForm] = useState({
    username: "",
    email: "",
    code: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [forgotError, setForgotError] = useState("");
  const [showForgotNew, setShowForgotNew] = useState(false);
  const [showForgotConfirm, setShowForgotConfirm] = useState(false);

  const navigate = useNavigate();

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm({ resolver: zodResolver(loginSchema) });

  const {
    register: registerNew,
    handleSubmit: handleSubmitNew,
    formState: { errors: newErrors },
  } = useForm({ resolver: zodResolver(newPassSchema) });

  const onSubmit = async (values) => {
    try {
      setLoading(true);
      const data = await AuthService.signin(values.username, values.password);

      if (data.mode === "new_password_required") {
        console.log("‚ö†Ô∏è C·∫ßn ƒë·ªïi m·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu");
        // üëâ L∆∞u session v√† username ƒë·ªÉ d√πng khi g·ªçi firstLogin
        setNewUser({ username: data.username, session: data.session });
        reset();
      } else {
        setAlert("success");
        setTimeout(() => {
          setAlert(null);
          navigate("/app");
        }, 1500);
      }
    } catch (err) {
      console.error("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i:", err);
      if (err.message?.includes("User is disabled")) {
        setAlert("disabled");
      } else if (
        err.message?.includes("NetworkError") ||
        err.code === "ERR_NETWORK" ||
        err.message?.includes("ECONNREFUSED")
      ) {
        setAlert("server_error");
      } else {
        setShakeKey((k) => k + 1);
        setAlert("error");
      }
      setTimeout(() => setAlert(null), 2500);
    } finally {
      setLoading(false);
    }
  };

  const onSubmitNewPassword = async (values) => {
    try {
      setLoading(true);
      const result = await AuthService.firstLogin(
        newUser.username,
        values.newPassword,
        newUser.session
      );
      console.log("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu th√†nh c√¥ng:", result);

      setAlert("success");
      setTimeout(() => {
        toast.success("Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i b·∫±ng m·∫≠t kh·∫©u m·ªõi.");
        setNewUser(null);
        setView("login"); // quay l·∫°i form login
      }, 1800);
    } catch (err) {
      console.error("‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", err);
      setAlert("error");
    } finally {
      setLoading(false);
    }
  };

  // G·ª≠i m√£ x√°c nh·∫≠n
  const handleSendForgotCode = async () => {
    setForgotError(""); // clear l·ªói c≈©

    if (!forgotForm.username || !forgotForm.email) {
      setForgotError("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß Username v√† Email");
      return;
    }

    try {
      setLoading(true);
      const res = await AuthService.forgotPassword(
        forgotForm.username,
        forgotForm.email
      );
      toast.success(res.message || "ƒê√£ g·ª≠i m√£ x√°c nh·∫≠n t·ªõi email");
      console.log("‚úÖ forgotPassword response:", res);
      setForgotStep(2);
    } catch (err) {
      console.error("‚ùå L·ªói g·ª≠i m√£ qu√™n m·∫≠t kh·∫©u:", err);
      const message =
        err?.message ||
        err?.response?.data?.message ||
        "Kh√¥ng g·ª≠i ƒë∆∞·ª£c m√£. Ki·ªÉm tra l·∫°i th√¥ng tin.";
      setForgotError(message); // ‚ö° g√°n v√†o state ƒë·ªÉ render ra m√†n h√¨nh
      toast.error(message);
    } finally {
      setLoading(false);
    }
  };

  // X√°c nh·∫≠n m√£ v√† ƒë·ªïi m·∫≠t kh·∫©u
  const handleConfirmForgot = async () => {
    if (forgotForm.newPassword !== forgotForm.confirmPassword) {
      toast.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
      return;
    }
    try {
      setLoading(true);
      const res = await AuthService.confirmForgotPassword(
        forgotForm.username,
        forgotForm.code,
        forgotForm.newPassword
      );
      toast.success(res.message || "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!");
      console.log("‚úÖ confirmForgotPassword response:", res);
      setView("login");
      setForgotStep(1);
      setForgotForm({
        username: "",
        email: "",
        code: "",
        newPassword: "",
        confirmPassword: "",
      });
    } catch (err) {
      console.error("‚ùå L·ªói x√°c nh·∫≠n m√£:", err);

      const message =
        err?.message ||
        err?.response?.data?.message ||
        "M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.";

      setForgotError(message); // ‚ö° G√°n l·ªói ƒë·ªÉ hi·ªÉn th·ªã ra FE
      toast.error(message);
    } finally {
      setLoading(false);
    }
  };

  const shake = {
    x: [0, -8, 8, -6, 6, -3, 3, 0],
    transition: { duration: 0.4 },
  };

  return (
    <>
      <Card className="p-10 rounded-3xl bg-gradient-to-br from-gray-900/70 via-gray-800/50 to-gray-900/70 border border-white/10 backdrop-blur-2xl shadow-[0_0_30px_rgba(0,255,180,0.15)] w-[420px] mx-auto">
        <CardHeader>
          <CardTitle className="text-center text-3xl font-extrabold bg-gradient-to-r from-emerald-400 via-cyan-400 to-blue-500 bg-clip-text text-transparent">
            {newUser ? (
              "Ch√†o m·ª´ng ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu!"
            ) : (
              <>
                Welcome to <span className="text-cyan-400">FITX</span>
              </>
            )}
          </CardTitle>
        </CardHeader>

        {/* Hi·ªáu ·ª©ng chuy·ªÉn form */}
        <AnimatePresence mode="wait">
          {/* === LOGIN FORM === */}
          {view === "login" && !newUser && (
            <motion.form
              key="login-form"
              onSubmit={handleSubmit(onSubmit)}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.35, ease: "easeInOut" }}
            >
              <CardContent className="space-y-8 text-black dark:text-white">
                {/* Username */}
                <motion.div
                  key={`username-${shakeKey}`}
                  className="relative min-h-[64px]"
                  animate={errors.username ? shake : {}}
                >
                  <div className="absolute left-4 top-1/2 -translate-y-1/2">
                    üìß
                  </div>
                  <Input
                    placeholder="Username"
                    className="!pl-14"
                    {...register("username")}
                  />
                  {errors.username && (
                    <p className="absolute -bottom-5 left-0 text-sm text-red-400">
                      {errors.username.message}
                    </p>
                  )}
                </motion.div>

                {/* Password */}
                <motion.div
                  key={`password-${shakeKey}`}
                  className="relative min-h-[64px]"
                  animate={errors.password ? shake : {}}
                >
                  <div className="absolute left-4 top-1/2 -translate-y-1/2">
                    üîí
                  </div>
                  <Input
                    type={showPassword ? "text" : "password"}
                    placeholder="Password"
                    className="!pl-14 !pr-14"
                    {...register("password")}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-500 hover:text-cyan-400 transition"
                  >
                    {showPassword ? "üôà" : "üëÅÔ∏è"}
                  </button>
                  {errors.password && (
                    <p className="absolute -bottom-5 left-0 text-sm text-red-400">
                      {errors.password.message}
                    </p>
                  )}
                </motion.div>

                <Button
                  type="submit"
                  className="form-btn bg-gradient-to-r from-emerald-400 via-cyan-400 to-blue-500"
                >
                  {loading ? "ƒêang x·ª≠ l√Ω..." : "ƒêƒÇNG NH·∫¨P"}
                </Button>
              </CardContent>

              <CardFooter className="flex justify-between text-sm text-gray-400 mt-2">
                <a
                  href="#"
                  onClick={() => setView("forgot")}
                  className="hover:text-cyan-400"
                >
                  Qu√™n m·∫≠t kh·∫©u?
                </a>
              </CardFooter>
            </motion.form>
          )}

          {/* === NEW PASSWORD (l·∫ßn ƒë·∫ßu ƒëƒÉng nh·∫≠p) === */}
          {newUser && view === "login" && (
            <motion.form
              key="newpass-form"
              onSubmit={handleSubmitNew(onSubmitNewPassword)}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.35, ease: "easeInOut" }}
            >
              <CardContent className="space-y-6 text-black dark:text-white">
                {/* M·∫≠t kh·∫©u m·ªõi */}
                <div className="relative">
                  <Input
                    type={showNewPassword ? "text" : "password"}
                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                    {...registerNew("newPassword")}
                    className="!pr-14"
                  />
                  <button
                    type="button"
                    onClick={() => setShowNewPassword(!showNewPassword)}
                    className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-500 hover:text-cyan-400 transition"
                  >
                    {showNewPassword ? "üôà" : "üëÅÔ∏è"}
                  </button>
                  {newErrors.newPassword && (
                    <p className="text-sm text-red-400 mt-1">
                      {newErrors.newPassword.message}
                    </p>
                  )}
                </div>

                {/* X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi */}
                <div className="relative">
                  <Input
                    type={showConfirmPassword ? "text" : "password"}
                    placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
                    {...registerNew("confirmPassword")}
                    className="!pr-14"
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-500 hover:text-cyan-400 transition"
                  >
                    {showConfirmPassword ? "üôà" : "üëÅÔ∏è"}
                  </button>
                  {newErrors.confirmPassword && (
                    <p className="text-sm text-red-400 mt-1">
                      {newErrors.confirmPassword.message}
                    </p>
                  )}
                </div>

                <Button
                  type="submit"
                  className="w-full bg-gradient-to-r from-cyan-400 via-blue-400 to-indigo-500"
                >
                  {loading ? "ƒêang ƒë·ªïi m·∫≠t kh·∫©u..." : "X√°c nh·∫≠n ƒë·ªïi m·∫≠t kh·∫©u"}
                </Button>
              </CardContent>
            </motion.form>
          )}

          {/* === FORGOT PASSWORD === */}
          {view === "forgot" && (
            <motion.div
              key="forgot-form"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.35, ease: "easeInOut" }}
              className="space-y-6 text-black dark:text-white"
            >
              {forgotStep === 1 ? (
                <>
                  <Input
                    placeholder="Username"
                    value={forgotForm.username}
                    onChange={(e) =>
                      setForgotForm((f) => ({ ...f, username: e.target.value }))
                    }
                  />
                  <Input
                    placeholder="Email"
                    type="email"
                    value={forgotForm.email}
                    onChange={(e) =>
                      setForgotForm((f) => ({ ...f, email: e.target.value }))
                    }
                  />
                  <Button
                    onClick={handleSendForgotCode}
                    className="w-full bg-gradient-to-r from-emerald-400 via-cyan-400 to-blue-500"
                  >
                    {loading ? "ƒêang g·ª≠i..." : "G·ª≠i m√£ x√°c nh·∫≠n"}
                  </Button>
                  {forgotError && (
                    <p className="text-red-500 text-sm text-center">
                      {forgotError}
                    </p>
                  )}
                  <button
                    type="button"
                    onClick={() => setView("login")}
                    className="text-sm text-gray-500 hover:text-cyan-400"
                  >
                    ‚Üê Quay l·∫°i ƒëƒÉng nh·∫≠p
                  </button>
                </>
              ) : (
                <>
                  <Input
                    placeholder="M√£ x√°c nh·∫≠n"
                    value={forgotForm.code}
                    onChange={(e) =>
                      setForgotForm((f) => ({ ...f, code: e.target.value }))
                    }
                  />
                  {/* M·∫≠t kh·∫©u m·ªõi */}
                  <div className="relative">
                    <Input
                      placeholder="M·∫≠t kh·∫©u m·ªõi"
                      type={showForgotNew ? "text" : "password"}
                      value={forgotForm.newPassword}
                      onChange={(e) =>
                        setForgotForm((f) => ({
                          ...f,
                          newPassword: e.target.value,
                        }))
                      }
                      className="!pr-14"
                    />
                    <button
                      type="button"
                      onClick={() => setShowForgotNew(!showForgotNew)}
                      className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-500 hover:text-cyan-400 transition"
                    >
                      {showForgotNew ? "üôà" : "üëÅÔ∏è"}
                    </button>
                  </div>

                  {/* X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi */}
                  <div className="relative">
                    <Input
                      placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
                      type={showForgotConfirm ? "text" : "password"}
                      value={forgotForm.confirmPassword}
                      onChange={(e) =>
                        setForgotForm((f) => ({
                          ...f,
                          confirmPassword: e.target.value,
                        }))
                      }
                      className="!pr-14"
                    />
                    <button
                      type="button"
                      onClick={() => setShowForgotConfirm(!showForgotConfirm)}
                      className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-500 hover:text-cyan-400 transition"
                    >
                      {showForgotConfirm ? "üôà" : "üëÅÔ∏è"}
                    </button>
                  </div>
                  <Button
                    onClick={handleConfirmForgot}
                    className="w-full bg-gradient-to-r from-cyan-400 via-blue-400 to-indigo-500"
                  >
                    {loading ? "ƒêang x√°c nh·∫≠n..." : "X√°c nh·∫≠n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u"}
                  </Button>
                  {forgotError && (
                    <p className="text-red-500 text-sm text-center mt-2">
                      {forgotError}
                    </p>
                  )}
                  <button
                    type="button"
                    onClick={() => setForgotStep(1)}
                    className="text-sm text-gray-500 hover:text-cyan-400"
                  >
                    ‚Üê Nh·∫≠p l·∫°i Username & Email
                  </button>
                </>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </Card>

      {/* Alerts */}
      <LoadingAlert open={loading} setOpen={setLoading} />
      <SuccessAlert open={alert === "success"} setOpen={() => setAlert(null)} />
      <ErrorAlert open={alert === "error"} setOpen={() => setAlert(null)} />
      <ServerErrorAlert
        open={alert === "server_error"}
        setOpen={() => setAlert(null)}
      />
      <DisabledUserAlert
        open={alert === "disabled"}
        setOpen={() => setAlert(null)}
      />
    </>
  );
}
